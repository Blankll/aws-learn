Description:  lambda stack for lambda learn session
Parameters:
  LambdaName:
    Description: lambda default name
    Type: String
    Default: seven-lambda-learn-lambda
Resources:
  CloudWatchLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['/aws/lambda/', !Ref LambdaName ] ]
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies: 
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt 'CloudWatchLambdaLogGroup.Arn'
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaName
      Runtime: nodejs14.x
      Role: !GetAtt 'LambdaRole.Arn'
      Handler: app.handler
      Timeout: 300
      Code:
        S3Bucket: !ImportValue AchiveBucket
        S3Key: lambda-learn.zip
      Tags:
          - Key: group
            Value: aws-learn
          - Key: tribe
            Value: seven-lambda-learn
          - Key: application
            Value: seven-03-lambda
  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'ScheduledRule to trigger lambda regularly for lambda learn session'
      ScheduleExpression: 'rate(2 hours)'
      State: 'ENABLED'
      Targets:
        - Arn:  !GetAtt 'LambdaFunction.Arn'
          Id: !Join ['-', [!Ref LambdaName,  'event-rule'] ]
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt 'ScheduledRule.Arn'

